{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGridn.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGridn","loading","state","setState","useEffect","then","imgs","useFechGifs","imagenes","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC3B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACG,sBAAMC,SAXY,SAACC,GACnBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKjB,SACG,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAhBlB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPhBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACdC,EADc,iDACkCC,UAAWH,GAD7C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGGA,EAAKC,OAHR,uBAGZC,EAHY,EAGZA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC5B,MAAO,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATpB,kBAabM,GAba,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAClC,OACG,sBAAKc,UAAU,4CAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCDAO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGxB,ECJwB,SAACA,GACzB,MAA0Bd,mBAAS,CAChCqB,KAAK,GACLa,SAAS,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WAGJxB,EAAQC,GAAUwB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACrCf,KAAMkB,EACNL,SAAS,SAGhB,CAACpB,IAIIqB,EDdyBK,CAAY1B,GAAhC2B,EAAZ,EAAOpB,KAAca,EAArB,EAAqBA,QAGrB,OACG,qCACG,6BAAKpB,IACLoB,GAAW,wCACV,qBAAKJ,UAAU,YAAf,SACGW,EAASlB,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEbxBiB,EAAe,WACzB,MAAoC1C,mBAAS,CAAC,kBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOA,OACG,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACI4C,EAAWpB,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAAyBA,SAAUA,GAApBA,Y,MCf9B8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.75275497.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n   const [inputValue, setInputValue] = useState('');\r\n\r\n   const handleInputChange = (e) => {\r\n      setInputValue(e.target.value);\r\n   };\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      // console.log('Submit hecho');\r\n\r\n      if (inputValue.trim().length > 2) {\r\n         setCategories((cats) => [inputValue, ...cats]);\r\n         setInputValue('');\r\n      }\r\n   };\r\n\r\n   return (\r\n      <form onSubmit={handleSubmit}>\r\n         <input type=\"text\" value={inputValue} onChange={handleInputChange} />\r\n      </form>\r\n   );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n   setCategories: PropTypes.func.isRequired,\r\n};\r\n","export const getGifs = async (category) => {\r\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI( category )}&limit=10&api_key=ILoMoF21esslCMRoN6D7h4jQmbPpXRcV`;\r\n   const resp = await fetch(url);\r\n   const { data } = await resp.json();\r\n\r\n   const gifs = data.map((img) => {\r\n      return {\r\n         id: img.id,\r\n         title: img.title,\r\n         url: img.images?.downsized_medium.url,\r\n      };\r\n   });\r\n\r\n   return gifs;\r\n};\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n   return (\r\n      <div className=\"card  animate__animated animate__bounceIn\">\r\n         <img src={url} alt={title}></img>\r\n         <p>{title}</p>\r\n      </div>\r\n   );\r\n};\r\n","import React from 'react';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport { useFechGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGridn = ({ category }) => {\r\n  \r\n\r\n   const {data:imagenes,loading} = useFechGifs(category);\r\n  \r\n\r\n   return (\r\n      <>\r\n         <h3>{category}</h3>\r\n        {loading && <p>Loading</p>}\r\n         {<div className=\"card-grid\">\r\n            {imagenes.map((img) => (\r\n               <GifGridItem key={img.id} {...img} />\r\n            ))}\r\n         </div>}\r\n      </> \r\n   );\r\n};\r\n","import { useState, useEffect } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\n\r\nexport const useFechGifs = (category) => {\r\n   const [state, setState] = useState({\r\n      data:[],\r\n      loading: true\r\n   })\r\n\r\n   useEffect(()=>{\r\n\r\n      \r\n         getGifs(category).then(imgs => setState({\r\n            data: imgs,\r\n            loading: false\r\n         }))   \r\n    \r\n   },[category])\r\n\r\n   \r\n\r\n   return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGridn } from './components/GifGridn';\r\n\r\nexport const GifExpertApp = () => {\r\n   const [categories, setCategories] = useState(['One Punch Man']);\r\n\r\n   // const handleAdd = () => {\r\n   //    setcategories(['HunterXHunter', ...categories]);\r\n   //    setcategories(cats => [...cats, 'HunterXHunter' ])\r\n   // };\r\n\r\n   return (\r\n      <>\r\n         <h1>GifExpertApp</h1>\r\n         <AddCategory setCategories={setCategories} />\r\n         <hr />\r\n\r\n         <ol>\r\n            {categories.map((category) => (\r\n               <GifGridn key={category} category={category} />\r\n            ))}\r\n         </ol>\r\n      </>\r\n   );\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}